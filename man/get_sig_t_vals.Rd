% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_sig_t_vals.R
\name{get_sig_t_vals}
\alias{get_sig_t_vals}
\title{User wrapper function for the internal \code{get_significance_t_values()}}
\usage{
get_sig_t_vals(outfile_prefix, recursive = FALSE)
}
\arguments{
\item{outfile_prefix}{string. Prefix of output file produce from \code{analysis()} 
(identical to this parameter in this package's \code{get_results()}), which can have several
output file paths if the same prefix is run with \code{analysis()} several times. 

Ex.) \code{get_sig_t_vals("sig-prefix")} will execute \code{get_significance_t_values()}
on all files names \code{sig-prefix-###.iterative.txt} where \code{###} is the unique combination
of methods passed to \code{analysis()}. This value can be equal to nothing ("") if no
methods were passed to \code{analysis()}.}

\item{recursive}{boolean. Option to allow for subdirectory searching of the file prefix.
Set to FALSE for default in case of large subdirectories. This option is meant to help 
save time with R Studio and other editors' auto completion feature, which allows for tabbing
to complete the file name from the present working directory (PWD) and maintaining the current
PWD. 

If \code{FALSE}, \code{get_sig_t_vals()} will use the path passed to the function from outfile_prefix.
This may be either relative or absolute. Only the directory containing the desired file(s)
will be searched. (Note: if no file paths are explicitly provided, the PWD (".") will be used.)

If \code{TRUE}, \code{get_sig_t_vals()} will recursively searching through all files matching the Regex pattern
of \code{^output_prefix.*\\.iterative\\.txt$}, which essentially allows for any file name that starts 
with the specified outfile_prefix and ends with ".iterative.txt".}
}
\value{
The returned data frame includes Power analysis for values of 'r' and the corresponding
power.
}
\description{
\strong{Note: modifying the column names of the output file(s) produced by} \code{analysis()} 
\strong{will lead to unintended behavior.}

Returns the thresholding data frame created by the internal
\code{get_significance_t_values()}.
}
\examples{
\dontrun{
library(thresholding)
data_file <- system.file('extdata', 'HumanCellCycleSubset.ncol', package = "thresholding") 
file.copy(data_file, "./")     # Copy the file to your working directory
outfile_prefix = "./get_sig_t_vals_test"

analysis(data_file, 
         outfile_prefix = outfile_prefix,
         methods = c(2,3,8),
         num_samples = 13,
         overwrite = TRUE
)
get_sig_t_vals(outfile_prefix)
}
}
